@page "/questionnaire"
@using MudBlazor
@using System.Net.Http.Json
@using ArchPilot.Application.DTOs
@using ArchPilot.Application.Features.ProjectRequirements.Commands.CreateProjectRequirements
@using ArchPilot.Domain.Enums
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Architecture Questionnaire</PageTitle>

<MudContainer Class="scrollable-questionnaire">
    <MudText Typo="Typo.h4" GutterBottom="true">Architecture Questionnaire</MudText>
    <MudText Typo="Typo.subtitle1" Class="mb-4">
        Answer a few questions to get a personalized architecture recommendation.
    </MudText>

    @if (_loading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        <EditForm EditContext="@_editContext" OnValidSubmit="Submit">
            <DataAnnotationsValidator />
            <MudStepper @ref="_stepper" @bind-ActiveStep="_activeStep">
                <MudStep Title="Core Project Details" OnNext="ValidateStep">
                    <MudText Typo="Typo.subtitle1" GutterBottom="true">Project Type</MudText>
                    <MudRadioGroup @bind-Value="_command.ProjectType" Required="true" RequiredError="Project type is required.">
                        @foreach (var option in _options.ProjectTypes)
                        {
                            <MudRadio Value="@((ProjectType)option.Value)">@option.Name</MudRadio>
                        }
                    </MudRadioGroup>

                    <MudText Typo="Typo.subtitle1" GutterBottom="true" Class="mt-4">Project Scale</MudText>
                    <MudRadioGroup @bind-Value="_command.ProjectScale" Required="true" RequiredError="Project scale is required.">
                        @foreach (var option in _options.ProjectScales)
                        {
                            <MudRadio Value="@((ProjectScale)option.Value)">@option.Name</MudRadio>
                        }
                    </MudRadioGroup>

                    <MudText Typo="Typo.subtitle1" GutterBottom="true" Class="mt-4">Expected Users</MudText>
                    <MudRadioGroup @bind-Value="_command.ExpectedUsers" Required="true" RequiredError="Expected users is required.">
                        @foreach (var option in _options.ExpectedUsers)
                        {
                            <MudRadio Value="@((ExpectedUsers)option.Value)">@option.Name</MudRadio>
                        }
                    </MudRadioGroup>

                    <MudText Typo="Typo.subtitle1" GutterBottom="true" Class="mt-4">Performance Priority</MudText>
                    <MudRadioGroup @bind-Value="_command.PerformancePriority" Required="true" RequiredError="Performance priority is required.">
                        @foreach (var option in _options.PerformancePriorities)
                        {
                            <MudRadio Value="@((PerformancePriority)option.Value)">@option.Name</MudRadio>
                        }
                    </MudRadioGroup>

                    <MudText Typo="Typo.subtitle1" GutterBottom="true" Class="mt-4">Team Experience</MudText>
                    <MudSelect T="Option"
                               @bind-SelectedValues="_selectedExperience"
                               MultiSelection="true"
                               Label="Select your team's experience"
                               Variant="Variant.Outlined"
                               SelectAll="true"
                               SelectAllText="Select All Technologies"
                               ToStringFunc="@(option => option?.Name ?? string.Empty)">
                               >
                        @foreach (var option in _options.TechnologyExperiences)
                        {
                            <MudSelectItem T="Option" Value="@option">@option.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudStep>
                <MudStep Title="Project Constraints" OnNext="ValidateStep">
                    <MudText Typo="Typo.subtitle1" GutterBottom="true">Timeline</MudText>
                    <MudRadioGroup @bind-Value="_command.Timeline" Required="true" RequiredError="Timeline is required.">
                        @foreach (var option in _options.Timelines)
                        {
                            <MudRadio Value="@((Timeline)option.Value)">@option.Name</MudRadio>
                        }
                    </MudRadioGroup>

                    <MudText Typo="Typo.subtitle1" GutterBottom="true" Class="mt-4">Budget Range</MudText>
                    <MudRadioGroup @bind-Value="_command.BudgetRange" Required="true" RequiredError="Budget range is required.">
                        @foreach (var option in _options.BudgetRanges)
                        {
                            <MudRadio Value="@((BudgetRange)option.Value)">@option.Name</MudRadio>
                        }
                    </MudRadioGroup>

                    <MudText Typo="Typo.subtitle1" GutterBottom="true" Class="mt-4">Regional Compliance</MudText>
                    <MudRadioGroup @bind-Value="_command.RegionalCompliance" Required="true" RequiredError="Regional compliance is required.">
                        @foreach (var option in _options.RegionalCompliances)
                        {
                            <MudRadio Value="@((RegionalCompliance)option.Value)">@option.Name</MudRadio>
                        }
                    </MudRadioGroup>
                </MudStep>
                <MudStep Title="What If Scenarios" OnNext="ValidateStep">
                    <MudText Typo="Typo.h6" GutterBottom="true">What if you get 10x traffic overnight?</MudText>
                    <MudRadioGroup @bind-Value="_command.TrafficSpikeResponse" Required="true" RequiredError="This field is required.">
                        @foreach (var option in _options.TrafficSpikeResponses)
                        {
                            <MudRadio Value="@((TrafficSpikeResponse)option.Value)">@option.Name</MudRadio>
                        }
                    </MudRadioGroup>
                    
                    <MudText Typo="Typo.subtitle1" GutterBottom="true" Class="mt-4">What if your team doubles in 6 months?</MudText>
                    <MudRadioGroup @bind-Value="_command.TeamGrowthResponse" Required="true" RequiredError="This field is required.">
                        @foreach (var option in _options.TeamGrowthResponses)
                        {
                            <MudRadio Value="@((TeamGrowthResponse)option.Value)">@option.Name</MudRadio>
                        }
                    </MudRadioGroup>
                    
                    <MudText Typo="Typo.subtitle1" GutterBottom="true" Class="mt-4">What if you handle sensitive user data?</MudText>
                    <MudRadioGroup @bind-Value="_command.DataSensitivityResponse" Required="true" RequiredError="This field is required.">
                        @foreach (var option in _options.DataSensitivityResponses)
                        {
                            <MudRadio Value="@((DataSensitivityResponse)option.Value)">@option.Name</MudRadio>
                        }
                    </MudRadioGroup>
                    
                    <MudText Typo="Typo.subtitle1" GutterBottom="true" Class="mt-4">What if you need to integrate with 3rd party APIs?</MudText>
                    <MudRadioGroup @bind-Value="_command.IntegrationNeedsResponse" Required="true" RequiredError="This field is required.">
                        @foreach (var option in _options.IntegrationNeedsResponses)
                        {
                            <MudRadio Value="@((IntegrationNeedsResponse)option.Value)">@option.Name</MudRadio>
                        }
                    </MudRadioGroup>
                </MudStep>
                <MudStep Title="Submit">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Get Recommendation</MudButton>
                </MudStep>
            </MudStepper>
        </EditForm>
    }
</MudContainer>

@code {
    private MudStepper _stepper = default!;
    private int _activeStep = 0;
    private bool _loading = true;
    private QuestionnaireOptions _options = new();
    private CreateProjectRequirementsCommand _command = new();
    private IEnumerable<Option> _selectedExperience = new List<Option>();
    private int _totalSteps = 4; // Total number of steps
    private EditContext _editContext;

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(_command);
        try
        {
            _options = await Http.GetFromJsonAsync<QuestionnaireOptions>("api/ProjectRequirements/questionnaire/options");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading questionnaire options: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private bool IsStep1Valid() => _command.ProjectType != 0 && _command.ProjectScale != 0 && _command.ExpectedUsers != 0 && _command.PerformancePriority != 0 && _selectedExperience.Any();
    private bool IsStep2Valid() => _command.Timeline != 0 && _command.BudgetRange != 0 && _command.RegionalCompliance != 0;
    private bool IsStep3Valid() => _command.TrafficSpikeResponse != 0 && _command.TeamGrowthResponse != 0 && _command.DataSensitivityResponse != 0 && _command.IntegrationNeedsResponse != 0;

    private void ValidateStep()
    {
        bool stepIsValid = false;
        switch (_activeStep)
        {
            case 0:
                stepIsValid = IsStep1Valid();
                break;
            case 1:
                stepIsValid = IsStep2Valid();
                break;
            case 2:
                stepIsValid = IsStep3Valid();
                break;
        }

        if (!stepIsValid)
        {
            Snackbar.Add("Please fill out all required fields in this step.", Severity.Error);
            return;
        }
    }

    private async Task Submit()
    {
        //_command.TeamExperience = (Domain.Enums.TechnologyExperience)_selectedExperience.Sum();
        var ex = _selectedExperience.ToList();
        var response = await Http.PostAsJsonAsync("api/ProjectRequirements", _command);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<ProjectRequirementsDto>();
            NavigationManager.NavigateTo($"/recommendations/{result.Id}/{result.TenantId}/{3}");
        }
        else
        {
            Console.WriteLine("Error submitting questionnaire");
        }
    }


    public class QuestionnaireOptions
    {
        public List<Option> ProjectTypes { get; set; } = new();
        public List<Option> ProjectScales { get; set; } = new();
        public List<Option> ExpectedUsers { get; set; } = new();
        public List<Option> PerformancePriorities { get; set; } = new();
        public List<Option> TechnologyExperiences { get; set; } = new();
        public List<Option> Timelines { get; set; } = new();
        public List<Option> BudgetRanges { get; set; } = new();
        public List<Option> RegionalCompliances { get; set; } = new();
        public List<Option> TrafficSpikeResponses { get; set; } = new();
        public List<Option> TeamGrowthResponses { get; set; } = new();
        public List<Option> DataSensitivityResponses { get; set; } = new();
        public List<Option> IntegrationNeedsResponses { get; set; } = new();
    }

    public class Option
    {
        public int Value { get; set; }
        public string Name { get; set; } = string.Empty;
        public override string ToString()
        { 
            return Name;
        }
    }
}

<style>
    .scrollable-questionnaire {
        max-height: calc(100vh - 128px); /* Adjust this value based on your layout's header/footer height */
        overflow-y: auto;
        padding-right: 15px; /* To avoid content hiding behind scrollbar */
    }
</style>
